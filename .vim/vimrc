" ====================================================================
" auto install{{{
if empty(glob('~/.vim/autoload/plug.vim'))
  silent execute "!curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
  autocmd VimEnter * PlugInstall
endif
" helptab{{{
function! s:helptab()
  if &buftype == 'help'
    wincmd T
    nnoremap <buffer> q :q<CR>
  endif
endfunction
autocmd BufEnter *.txt call s:helptab()
"}}}
" language support{{{
nnoremap <Leader>r :call CompileRunGcc()<CR>
func! CompileRunGcc()
    exec "w"
    if &filetype == 'c'
        set splitbelow
        silent! exec "!g++ % -o %<"
        :sp
        :res -9
        :term ./%<
    elseif &filetype == 'cpp'
        set splitbelow
        silent! exec "!g++ -std=c++11 % -Wall -o %<"
        :sp
        :res -9
        :term ./%<
    elseif &filetype == 'java'
        silent! exec "!javac %"
        :sp
        :res -9
        :term java %:r
    elseif &filetype == 'sh'
        :!time bash %
    elseif &filetype == 'python'
        set splitbelow
        :sp
        :res -9
        :term python3 %
    elseif &filetype == 'go'
        set splitbelow
        :sp
        :res -9
        :term go run %
    endif
endfunc
"}}}
" highlight the current line{{{
function! ToggleHighlightCurrentLine()
    if !exists('b:myhllines')
        let b:myhllines = {}
    endif
    let lnum = line('.')
    if has_key(b:myhllines, lnum)
        silent! call matchdelete(b:myhllines[lnum])
        unlet b:myhllines[lnum]
    else
        let matchid = matchadd('Search', '\%'.lnum.'l')
        let b:myhllines[lnum] = matchid
    endif
endfunction
function! ClearHighlightLines()
    if exists('b:myhllines')
        for value in values(b:myhllines)
            silent! call matchdelete(value)
        endfor
    endif
    let b:myhllines = {}
endfunction
nnoremap <silent> <Space>i :call ToggleHighlightCurrentLine()<CR>
nnoremap <silent> <Space>d :call ClearHighlightLines()<CR>
"}}}
" ====================================================================
" set{{{
let mapleader=","
set history=10000
set wildmenu
set noshowcmd
set noshowmatch
set noshowmode
set nospell
set novisualbell
set smartcase
set smartindent
set smarttab
let &t_ut=''
set encoding=utf-8
set report=0
set ruler
set fillchars=vert:\ ,stl:\ ,stlnc:\
set magic
set laststatus=2
set completeopt=longest,noinsert,menuone,noselect,preview
set terse
set number
set relativenumber
set numberwidth=1
set noeb
set wrap
set autoread
set hlsearch
exec "nohlsearch"
set incsearch
set autoindent
set hidden
set ignorecase
set cindent
set backspace=indent,eol,start
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set autochdir
set updatetime=100
set nowritebackup
set nobackup
set shortmess+=c
set signcolumn=yes
"}}}
" ====================================================================
" map {{{
vnoremap ; :
nnoremap Q @q
nnoremap ; :
nnoremap / mr/
nnoremap Y y$
nnoremap > >>
nnoremap < <<
nnoremap <silent> <Esc> :set nohlsearch<CR>
nnoremap <silent> <Backspace><Space> :g/^\s*$/d<CR>
nnoremap <silent> yn :let @+ = expand('%')<CR>
nnoremap <silent> yp :let @+ = expand('%:p')<CR>
nnoremap <silent> yd :let @+=getcwd()<CR>
nnoremap <silent> gh K
"}}}
" ====================================================================
" imap{{{
imap <C-F> <Right>
imap <C-B> <Left>
imap <C-A> <Home>
imap <C-E> <End>
imap <C-R> <Nop>
imap <C-V> <Nop>
imap <C-Y> <Nop>
imap <C-O> <Return><UP><END><Return>
imap <C-C> <Esc>
imap <C-K> <Nop>
imap <C-J> <Nop>
imap <C-Z> <Nop>
"}}}
" ====================================================================
" cmd{{{
cnoreabbrev todark set background=dark
cnoreabbrev tolight set background=light
cnoremap <C-A> <Home>
cnoremap <C-S> <Nop>
cnoremap <C-E> <End>
cnoremap <C-L> <Nop>
cnoremap <C-K> <Nop>
cnoremap <C-J> <Nop>
cnoremap <C-Z> <Nop>
cnoremap <C-X> <Nop>
cnoremap <C-V> <Nop>
cnoremap <C-B> <Left>
cnoremap <C-Y> <Nop>
cnoremap <C-O> <Nop>
cnoremap <C-R> <Nop>
cnoremap <C-Q> <Nop>
cnoremap <C-F> <Right>
"}}}
" ====================================================================
" nop{{{
map X <Nop>
map b <Nop>
map B <Nop>
map <Space> <Nop>
map K <Nop>
map J <Nop>
map Z <Nop>
map ZZ <Nop>
map <C-]> <Nop>
map <C-B> <Nop>
map <C-Z> <Nop>
map <C-F> <Nop>
map <C-Y> <Nop>
map <C-O> <Nop>
"}}}
" ====================================================================
" fold{{{
set fdm=marker
set foldenable
set foldcolumn=0
noremap zi za
noremap zn zr
noremap zN zR
map zF <Nop>
map za <Nop>
map zA <Nop>
map zI <Nop>
map zr <Nop>
map zR <Nop>
map zo <Nop>
map zO <Nop>
map zc <Nop>
map zC <Nop>
map zv <Nop>
map zV <Nop>
map zx <Nop>
map zX <Nop>
"}}}
" ====================================================================
" scrolloff{{{
set scrolloff=5
"}}}
" ====================================================================
" save cursor{{{
au BufReadPost * if line("'\"")>1 && line("'\"")<=line("$") | exe "normal! g'\"" | endif
"}}}
" ====================================================================
" substitute{{{
vnoremap <Space>s :s///g<left><left><left>
nnoremap <Space>s :%s///g<left><left><left>
"}}}
" ====================================================================
" windows split{{{
set splitright
set splitbelow
"}}}
" ====================================================================
" windows focus{{{
noremap <silent> <C-L> <C-W>l
noremap <silent> <C-H> <C-W>h
noremap <silent> <C-J> <C-W>j
noremap <silent> <C-K> <C-W>k
"}}}
" ====================================================================
" windows size{{{
nnoremap <silent> zk :res +5<CR>
nnoremap <silent> zj :res -5<CR>
nnoremap <silent> zl :vertical resize-5<CR>
nnoremap <silent> zh :vertical resize+5<CR>
"}}}
" ====================================================================
" windows exchange{{{
nnoremap <silent> <C-X> <C-W>K
nnoremap <silent> <C-V> <C-W>H
nnoremap <silent> <C-T> <C-W>T
"}}}
" ====================================================================
" cursor move{{{
noremap <C-E> $
noremap <C-A> ^
noremap e E
noremap w W
noremap E gE
noremap W B
"}}}
" ====================================================================
" tab switch{{{
nnoremap <silent> <Tab> :tabnext<CR>
nnoremap <silent> <S-Tab> :tabprevious<CR>
"}}}
" ====================================================================
" visual{{{
noremap <silent> vv <C-V>
noremap <silent> gV ggvG$
"}}}
" ====================================================================
" terminal{{{
tnoremap <C-O> <C-\><C-N>
nnoremap <silent> <Leader>x :terminal<CR>
"}}}
" ====================================================================
filetype plugin on
filetype on
filetype indent on
filetype plugin indent on
let g:plug_window = '-tabnew'
call plug#begin('~/.vim/plugged')
Plug 'morhetz/gruvbox'
Plug 'rbong/vim-crystalline'
Plug 'yggdroot/indentline' " comfortable and obvious code indentline
Plug 'tpope/vim-surround' " '',()[]{}
Plug 'tpope/vim-commentary' " annotation code
Plug 'RRethy/vim-illuminate' " underline
Plug 'tpope/vim-capslock' " <C-G>c,gC
Plug 'tpope/vim-repeat' " super .
Plug 'junegunn/vim-easy-align', {'on': '<Plug>(EasyAlign)'} " align
Plug 'chrisbra/Colorizer', {'on': 'ColorHighlight'} " show colors
Plug 'lambdalisue/suda.vim' " sudo write
Plug 'mg979/vim-visual-multi' " multiple currors
Plug 'tpope/vim-fugitive'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'AndrewRadev/splitjoin.vim' "gJ,gS
Plug 'mattn/emmet-vim', {'for': ['html', 'css', 'php', 'less']}
Plug 'luochen1990/rainbow' " obvious pairs
Plug 'tmhedberg/SimpylFold',{'for': 'python'}
Plug 'Vimjas/vim-python-pep8-indent',{'for': 'python'}
Plug 'liuchengxu/vista.vim'
Plug 'uiiaoo/java-syntax.vim'
Plug 'pangloss/vim-javascript', { 'for': ['html', 'javascript'] }
Plug 'mattn/emmet-vim', {'for': ['html', 'xml']}
Plug 'alvan/vim-closetag', {'for': ['html', 'xml']}
" Plug 'fatih/vim-go' , { 'for': 'go', 'tag': '*'}
Plug 'mbbill/undotree', {'on': 'UndotreeToggle'}
Plug 'ctrlpvim/ctrlp.vim'
Plug 'FelikZ/ctrlp-py-matcher'
call plug#end()
colorscheme gruvbox
let g:gruvbox_italic = 1
set background=dark
highlight Normal guibg=NONE ctermbg=None
highlight! link SignColumn LineNr
set t_Co=256
" set termguicolors
"}}}
" ====================================================================
" suda.vim{{{
cnoreabbrev suda w suda://%
"}}}
" ====================================================================
" autocmd{{{
autocmd BufNewFile,BufRead *.json set filetype=json
augroup json_autocmd
  autocmd!
  autocmd FileType json setlocal autoindent
  autocmd FileType json setlocal formatoptions=tcq2l
  autocmd FileType json setlocal foldmethod=syntax
augroup END
auto FileType python,shell,coffee set commentstring=#\ %s
autocmd FileType java,c,cpp set commentstring=//\ %s
autocmd FileType markdown,md setlocal commentstring=<!--\ %s-->
"}}}
" ====================================================================
" vim-easy-align{{{
vmap <Space>e <Plug>(EasyAlign)
"}}}
" ====================================================================
" vim-illuminate{{{
let g:Illuminate_delay = 1000
"}}}
" ====================================================================
" multi{{{
let g:VM_theme = 'spacegray'
let g:VM_maps = {}
let g:VM_maps['Find Under'] = '<Space>J'
let g:VM_maps['Find Subword Under'] = '<Space>J'
let g:VM_maps['Find Next'] = 'j'
let g:VM_maps['Find Prev'] = 'k'
let g:VM_maps['Remove Region'] = 'q'
let g:VM_maps['Skip Region'] = 's'
let g:VM_maps["Undo"] = 'u'
let g:VM_maps["Redo"] = '<C-r>'
"}}}
" ====================================================================
" SimpylFold{{{
" Vimjas/vim-python-pep8-indent
let g:SimpylFold_docstring_preview = 1
let g:python_highlight_all = 1
" let g:python_slow_sync = 0
"}}}
" ====================================================================
" rainbow{{{
let g:rainbow_active = 1
    let g:rainbow_conf = {}
    let g:rainbow_conf.guifgs = ['white', 'yellow', 'darkorange', 'darkgray', 'darkorange']
    let g:rainbow_conf.ctermfgs = ['darkblue', 'darkyellow', 'darkgreen', 'darkgray', 'darkmagenta']
    let g:rainbow_conf.operators = '_,_'
    let g:rainbow_conf.parentheses = ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold']
    let g:rainbow_conf.separately = { '*': {} }
"}}}
" ====================================================================
" emmet-vim"{{{
imap <C-L> <C-Z>,
let g:user_emmet_leader_key='<C-Z>'
"}}}
" ====================================================================
" indentline{{{
autocmd! User indentLine doautocmd indentLine Syntax
let g:indentLine_char_list = ['|']
let g:indentLine_fileTypeExclude = ['json', 'markdown']
let g:indentLine_bufTypeExclude = ['help', 'terminal', 'nofile']
"}}}
" ====================================================================
" coc.nvim{{{
let g:coc_global_extensions=[
            \'coc-prettier',
            \'coc-java',
            \'coc-snippets',
            \'coc-go',
            \'coc-diagnostic',
            \'coc-docker',
            \'coc-gitignore',
            \'coc-pairs',
            \'coc-yank',
            \'coc-git',
            \'coc-leetcode',
            \'coc-lists',
            \'coc-vetur',
            \'coc-calc',
            \'coc-cssmodules',
            \'coc-markdownlint',
            \'coc-clangd',
            \'coc-translator',
            \'coc-tsserver'
            \'coc-explorer',
            \'coc-phpls',
            \'coc-python',
            \'coc-vimlsp',
            \'coc-html',
            \'coc-json',
            \'coc-css',
            \]

let g:coc_snippet_next = '<c-j>'
let g:coc_snippet_prev = '<c-k>'
vmap <C-j> <Plug>(coc-snippets-select)
imap <C-j> <Plug>(coc-snippets-expand-jump)

nmap cn <Plug>(coc-rename)

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> ]c <Plug>(coc-diagnostic-next-error)
nmap <silent> [c <Plug>(coc-diagnostic-prev-error)

nmap <silent> <C-F> <Plug>(coc-format)
vmap <silent> <C-F> <Plug>(coc-format-selected)

nmap <silent> <Leader>j <Plug>(coc-git-nextchunk)
nmap <silent> <Leader>k <Plug>(coc-git-prevchunk)

nmap <silent> <space>t <Plug>(coc-translator-e)
vmap <silent> <space>t <Plug>(coc-translator-ev)

nmap <Space>ca <Plug>(coc-calc-result-append)
nmap <Space>cr <Plug>(coc-calc-result-replace)

nnoremap <silent> t :CocCommand explorer<CR>

nnoremap <silent> <Space>y :CocList --normal yank<CR>
nnoremap <silent> <Space>f :CocList files<CR>
nnoremap <silent> <Space>b :CocList buffers<CR>
nnoremap <silent> <Space>l :CocList lines<CR>
nnoremap <silent> <Space>m :CocList marks<CR>
nnoremap <silent> <Space>h :CocList mru<CR>
nnoremap <silent> <Space>L :CocList<CR>
nnoremap <silent> <Space>C :CocCommand<CR>
nnoremap <silent> <Leader>a :CocCommand git.chunkStage<CR>
nnoremap <silent> <Leader>u :CocCommand git.chunkUndo<CR>
nnoremap <silent> <Leader>p :CocCommand git.chunkInfo<CR>
" vim-fugitive
nnoremap <silent> <Leader>b :Gblame<CR>
nnoremap <silent> <Leader>s :Gstatus<CR>
nnoremap <silent> <Leader>c :Gcommit<CR>
"}}}
" ====================================================================
" vista.vim{{{
let g:vista_sidebar_position = 'vertical botright'
let g:vista_sidebar_width = 35
let g:vista_icon_indent = ["╰─▸ ", "├─▸ "]
let g:vista_default_executive = 'ctags'
let g:vista#renderer#enable_icon = 1
let g:vista#renderer#icons = {
\   "function": "\uf794",
\   "variable": "\uf71b",
\  }
"}}}
" ====================================================================
" vim-crystalline{{{
	function! StatusDiagnostic() abort
	  let info = get(b:, 'coc_diagnostic_info', {})
	  if empty(info) | return '' | endif
	  let msgs = []
	  if get(info, 'error', 0)
	    call add(msgs, ' E' . info['error'])
	  endif
	  if get(info, 'warning', 0)
	    call add(msgs, ' W' . info['warning'])
	  endif
	  return join(msgs, ' ') . ' ' . get(g:, 'coc_status', '')
	endfunction
  function! StatusLine(current, width)
    let l:s = ''
    if a:current
      let l:s .= crystalline#mode() . crystalline#right_mode_sep('')
    else
      let l:s .= '%#CrystallineInactive#'
    endif
    let l:s .= ' %f%h%w%m%r '
    if a:current
      let l:s .= crystalline#right_sep('', 'Fill') . ' %{fugitive#head()} %{StatusDiagnostic()} %{g:codelf_status}'
    endif
    let l:s .= '%='
    if a:current
      let l:s .= crystalline#left_sep('', 'Fill')
      let l:s .= crystalline#left_mode_sep('')
    endif
    if a:width > 20
      let l:s .= ' %{&ft}[%{&fenc!=#""?&fenc:&enc}][%{&ff}] %l/%L %c%V %P '
    else
      let l:s .= ''
    endif
    return l:s
  endfunction
  function! TabLine()
    let l:vimlabel = ''
    return crystalline#bufferline(2, len(l:vimlabel), 1).'%=%#CrystallineTab#' .l:vimlabel
  endfunction
  let g:crystalline_enable_sep = 0
  let g:crystalline_statusline_fn = 'StatusLine'
  let g:crystalline_tabline_fn = 'TabLine'
  let g:crystalline_theme = 'jellybeans'
  set showtabline=2
  set guioptions-=e
"}}}
" ====================================================================
" vim-surround{{{
nmap s ysiw
nmap S yss
vmap s S
"}}}
" ====================================================================
" ctrlp{{{
nnoremap <silent> <C-F>f :CtrlPCurFile<CR>
nnoremap <silent> <C-F><C-F> :CtrlPCurFile<CR>
nnoremap <silent> <C-F>h :CtrlPMRUFile<CR>
nnoremap <silent> <C-F><C-H> :CtrlPMRUFile<CR>
nnoremap <silent> <C-F>b :CtrlPBuffer<CR>
nnoremap <silent> <C-F><C-B> :CtrlPBuffer<CR>
nnoremap <silent> <C-F>w :CtrlPLine<CR>
nnoremap <silent> <C-F><C-w> :CtrlPLine<CR>
nnoremap <silent> <C-F>t :CtrlPBufTag<CR>
nnoremap <silent> <C-F><C-T> :CtrlPBufTag<CR>
nnoremap <C-Space> <Nop>
" if executable('rg')
"  set grepprg=rg\ --vimgrep\ --no-heading
"  set grepformat=%f:%l:%c:%m,%f:%l:%m
"  let g:ctrlp_user_command = 'rg %s -i --files --no-heading --max-depth 10'
" endif
let g:ctrlp_match_func = {'match' : 'pymatcher#PyMatch' }
let g:ctrlp_use_caching = 1
let dir = ['\.git', '\.hg$', '\.svn$', '\.vimundo$', '\.cache/ctrlp$',
          \    '\.rbenv', '\.gem', 'backup', 'Documents', $TMPDIR,
          \    'vendor']
" let g:ctrlp_custom_ignore = {
"       \ 'dir': '\v[\/]?(' . join(dir, '|') . ')',
"       \ 'file': '\v(\.exe|\.so|\.dll|\.DS_Store|\.db|COMMIT_EDITMSG)$'
"       \ }
let g:ctrlp_map = ''
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'
let g:ctrlp_by_filename = 1
let g:ctrlp_regexp = 0
let g:ctrlp_reuse_window = 'netrw\|help\|quickfix'
let g:ctrlp_switch_buffer = 0
let g:ctrlp_tabpage_position = 'ac'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_open_multiple_files = 't'
let g:ctrlp_clear_cache_on_exit = 1
let g:ctrlp_follow_symlinks = 0
let g:ctrlp_tilde_homedir = 1
let g:ctrlp_max_depth = 40
let g:ctrlp_max_files = 10000
let g:ctrlp_max_history = 0
let g:ctrlp_arg_map = 0
let g:ctrlp_path_nolim = 0
let g:ctrlp_mruf_max = 200
let g:ctrlp_default_input = 0
let g:ctrlp_lazy_update = 0
let g:ctrlp_match_current_file = 0
let g:ctrlp_brief_prompt = 0
let g:ctrlp_mruf_exclude = '/tmp/.*\|/temp/.*'
let g:ctrlp_match_window = 'bottom,order:btt,min:10,max:10,results:50'
let g:ctrlp_prompt_mappings = {
    \ 'PrtBS()':              ['<Bs>', '<C-H>'],
    \ 'PrtDelete()':          [],
    \ 'PrtDeleteWord()':      ['<C-W>'],
    \ 'PrtClear()':           ['<C-U>'],
    \ 'PrtSelectMove("j")':   ['<C-N>'],
    \ 'PrtSelectMove("k")':   ['<C-P>'],
    \ 'PrtSelectMove("t")':   [],
    \ 'PrtSelectMove("b")':   [],
    \ 'PrtSelectMove("u")':   [],
    \ 'PrtSelectMove("d")':   [],
    \ 'PrtHistory(-1)':       [],
    \ 'PrtHistory(1)':        [],
    \ 'AcceptSelection("e")': ['<CR>'],
    \ 'AcceptSelection("h")': ['<C-X>'],
    \ 'AcceptSelection("t")': ['<C-T>'],
    \ 'AcceptSelection("v")': ['<C-V>'],
    \ 'ToggleRegex()':        [],
    \ 'ToggleByFname()':      [],
    \ 'ToggleType(1)':        ['<C-J>'],
    \ 'ToggleType(-1)':       ['<C-K>'],
    \ 'PrtExpandDir()':       [],
    \ 'PrtInsert("c")':       [],
    \ 'PrtInsert()':          [],
    \ 'PrtCurStart()':        ['<C-A>'],
    \ 'PrtCurEnd()':          ['<C-E>'],
    \ 'PrtCurLeft()':         ['<C-B>', '<Left>'],
    \ 'PrtCurRight()':        ['<C-F>', '<Right>'],
    \ 'PrtClearCache()':      ['<C-R>'],
    \ 'PrtDeleteEnt()':       ['<C-D>'],
    \ 'CreateNewFile()':      ['<C-I>'],
    \ 'MarkToOpen()':         [],
    \ 'OpenMulti()':          [],
    \ 'PrtExit()':            ['<Esc>', '<C-C>', '<C-[>'],
    \ }
"}}}
" ====================================================================
" undotree{{{
if empty(glob('~/.cache/tmp/backup'))
silent !mkdir -p ~/.cache/tmp/backup
endif
if empty(glob('~/.cache/tmp/undo'))
silent !mkdir -p ~/.cache/tmp/undo
endif
set backupdir=~/.cache/tmp/backup,.
set directory=~/.cache/tmp/backup,.
if has('persistent_undo')
    set undofile
    set undodir=~/.cache/tmp/undo,.
endif
let g:undotree_DiffAutoOpen=1
let g:undotree_SetFocusWhenToggle=1
let g:undotree_ShortIndicators=1
let g:undotree_WindowLayout=2
let g:undotree_DiffpanelHeight=5
let g:undotree_SplitWidth=19
"}}}
" ============================================================================
